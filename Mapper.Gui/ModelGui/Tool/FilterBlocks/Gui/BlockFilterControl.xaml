<Window x:Class="Mapper.Gui.BlockFilterControl"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Mapper.Gui"
        mc:Ignorable="d"
        BorderBrush="#FF454545"
        BorderThickness="1"
        ResizeMode="CanResize"
        UseLayoutRounding="True"
        Icon="/Resources/Icon/ToolButton/Filter_64px.ico"
        Template="{DynamicResource CustomWindowFrameTemplate}"
        Title="Block filter" Height="600" Width="805" Background="#FF232323" WindowStartupLocation="CenterScreen" Loaded="Window_Loaded">

    <WindowChrome.WindowChrome>
        <WindowChrome GlassFrameThickness="0" CornerRadius="0" CaptionHeight="0" UseAeroCaptionButtons="False" ResizeBorderThickness="7"/>
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Template/CustomWindowFrameTemplate.xaml"/>
                <ResourceDictionary Source="/Resources/Template/ScrollBarStyle.xaml"/>
                <ResourceDictionary Source="/Resources/Template/TextBoxStyle.xaml"/>
                <ResourceDictionary Source="/Resources/Template/DataGridStyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Grid Margin="15, 0, 15, 15" Grid.Row="1">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="50" />
        </Grid.RowDefinitions>

        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="15" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="30" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Label Content="Solid blocks" FontWeight="Bold" Margin="-4, 3, 0, 0" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="#FFEEEEEE" FontSize="15" Grid.Row="0" />

                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="0">
                        <TextBox x:Name="SolidBlockSearch" FontSize="14" Height="25" Padding="4, 1, 0, 0" TextChanged="SolidBlockSearch_TextChanged" />
                        <TextBlock IsHitTestVisible="False" Text="Search" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="7, 0, 0, 2" Foreground="#FF969696">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, ElementName=SolidBlockSearch}" Value="">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>

                    <Button x:Name="SolidBlockAddButton" Grid.Column="1" Margin="3, 0, 0, 0" Width="25" Height="25" HorizontalAlignment="Left" Click="SolidBlockAddButton_Click" >
                        <Image Source="/Resources/Image/Scanner/Add_64px.png" Stretch="Fill" Margin="4" />

                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#FF353535"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#FF454545"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#FF454545"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#FF606060"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    
                    <Button x:Name="SolidBlockRemoveButton" Grid.Column="2" Margin="3, 0, 0, 0" Width="25" Height="25" HorizontalAlignment="Left" Click="SolidBlockRemoveButton_Click" >
                        <Image Source="/Resources/Image/Scanner/Trash_64px.png" Stretch="Fill" RenderOptions.BitmapScalingMode="HighQuality" Margin="3" />

                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#FF353535"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#FF454545"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#FF454545"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#FF606060"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                    <Button x:Name="ClearSolidBlocksButton" Content="Clear everything" Foreground="#FFEEEEEE" Grid.Column="3" Margin="3, 0, 0, 0" Width="100" Height="25" HorizontalAlignment="Left" Click="ClearSolidBlocksButton_Click" >
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#FF713535"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#FF454545"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#FF843E3E"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#FF9B4949"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>

                <Border BorderBrush="#FF404040" BorderThickness="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Row="2">
                    <DataGrid x:Name="SolidBlockView" RowBackground="#FF191919" VerticalAlignment="Stretch" VerticalGridLinesBrush="#FF1C1C1C" HorizontalGridLinesBrush="#FF1C1C1C" BorderThickness="0" HeadersVisibility="Column" HorizontalAlignment="Stretch" Background="#FF191919" AutoGenerateColumns="False" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Block name" Width="*" Binding="{Binding BlockName}">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="Foreground" Value="#FFEEEEEE" />
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                        <Setter Property="Margin" Value="8, 0, 0, 0 " />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="#FF1C1C1C" />
                                        <Setter Property="Foreground" Value="#FFEEEEEE" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Setter Property="BorderBrush" Value="#FF1C1C1C" />
                                        <Setter Property="Height" Value="25" />

                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#FF303030" />
                                            </Trigger>
                                            <Trigger Property="DataGridCell.IsSelected" Value="True">
                                                <Setter Property="Background" Value="#FF353535" />
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                    <Condition Property="DataGridCell.IsSelected" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="#FF424242"/>
                                            </MultiTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Border>

                <Button x:Name="SolidBlocksResetToDefault" Content="Reset to default" Foreground="#FFEEEEEE" Grid.Row="3" Margin="0, 3, 0, 0" Width="100" Height="25" HorizontalAlignment="Right" Click="SolidBlocksResetToDefault_Click" >
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Background" Value="#FF3F3F3C"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="#FF454545"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF4C4C49"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#FF595957"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>

            <Grid Grid.Column="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="30" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <Label Content="Transparent blocks" FontWeight="Bold" Margin="-4, 3, 0, 0" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="#FFEEEEEE" FontSize="15" Grid.Row="0" />

                <Grid Grid.Row="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <Grid Grid.Column="0">
                        <TextBox x:Name="TransparentBlockSearch" FontSize="14" Height="25" Padding="4, 1, 0, 0" TextChanged="TransparentBlockSearch_TextChanged" />
                        <TextBlock IsHitTestVisible="False" Text="Search" FontSize="14" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="7, 0, 0, 2" Foreground="#FF969696">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Text, ElementName=TransparentBlockSearch}" Value="">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Grid>

                    <Button x:Name="TransparentBlockAddButton" Grid.Column="1" Margin="3, 0, 0, 0" Width="25" Height="25" HorizontalAlignment="Left" Click="TransparentBlockAddButton_Click" >
                        <Image Source="/Resources/Image/Scanner/Add_64px.png" Stretch="Fill" Margin="4" />

                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#FF353535"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#FF454545"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#FF454545"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#FF606060"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                    
                    <Button x:Name="TransparentBlockRemoveButton" Grid.Column="2" Margin="3, 0, 0, 0" Width="25" Height="25" HorizontalAlignment="Left" Click="TransparentBlockRemoveButton_Click">
                        <Image Source="/Resources/Image/Scanner/Trash_64px.png" Stretch="Fill" RenderOptions.BitmapScalingMode="HighQuality" Margin="3" />

                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#FF353535"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#FF454545"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#FF454545"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#FF606060"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>

                    <Button x:Name="ClearTransparntBlocksButton" Content="Clear everything" Foreground="#FFEEEEEE" Grid.Column="3" Margin="3, 0, 0, 0" Width="100" Height="25" HorizontalAlignment="Left" Click="ClearTransparntBlocksButton_Click" >
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#FF713535"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Setter Property="BorderBrush" Value="#FF454545"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Border Background="{TemplateBinding Background}">
                                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#FF843E3E"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter Property="Background" Value="#FF9B4949"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                    </Button>
                </Grid>

                <Border BorderBrush="#FF404040" BorderThickness="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Row="2">
                    <DataGrid x:Name="TransparentBlockView" RowBackground="#FF191919"  VerticalAlignment="Stretch" VerticalGridLinesBrush="#FF1C1C1C" HorizontalGridLinesBrush="#FF1C1C1C" BorderThickness="0" HeadersVisibility="Column" HorizontalAlignment="Stretch" Background="#FF191919" AutoGenerateColumns="False" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Block name" Width="*" Binding="{Binding BlockName}">
                                <DataGridTextColumn.ElementStyle>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="Foreground" Value="#FFEEEEEE" />
                                        <Setter Property="VerticalAlignment" Value="Center" />
                                        <Setter Property="Margin" Value="8, 0, 0, 0 " />
                                    </Style>
                                </DataGridTextColumn.ElementStyle>
                                <DataGridTextColumn.CellStyle>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Setter Property="Background" Value="#FF1C1C1C" />
                                        <Setter Property="Foreground" Value="#FFEEEEEE" />
                                        <Setter Property="BorderThickness" Value="0" />
                                        <Setter Property="BorderBrush" Value="#FF1C1C1C" />
                                        <Setter Property="Height" Value="25" />

                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="#FF303030" />
                                            </Trigger>
                                            <Trigger Property="DataGridCell.IsSelected" Value="True">
                                                <Setter Property="Background" Value="#FF353535" />
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                    <Condition Property="DataGridCell.IsSelected" Value="True"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="#FF424242"/>
                                            </MultiTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </DataGridTextColumn.CellStyle>
                            </DataGridTextColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Border>

                <Button x:Name="TransparentBlocksResetToDefault" Content="Reset to default" Foreground="#FFEEEEEE" Grid.Row="3" Margin="0, 3, 0, 0" Width="100" Height="25" HorizontalAlignment="Right" Click="TransparentBlocksResetToDefault_Click" >
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Background" Value="#FF3F3F3C"/>
                            <Setter Property="BorderThickness" Value="1"/>
                            <Setter Property="BorderBrush" Value="#FF454545"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF4C4C49"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#FF595957"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
        </Grid>

        <Label Content="Y level settings" FontWeight="Bold" Margin="-4, 10, 0, 0" HorizontalAlignment="Left" VerticalAlignment="Top" Foreground="#FFEEEEEE" FontSize="15" Grid.Row="1" />

        <Border BorderBrush="#FF606060" BorderThickness="0, 1, 0, 0" Grid.Row="2" HorizontalAlignment="Stretch"/>

        <Grid Grid.Row="3" Margin="0, 15, 0, 15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Grid Grid.Column="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <RadioButton x:Name="HeightmapRadioButton" GroupName="YLevel" Content="Heightmap" Foreground="#FFEEEEEE" IsChecked="True" Grid.Row="0" Checked="HeightmapRadioButton_Checked" />
                <ComboBox x:Name="HeightmapComboBox" Height="25" Grid.Row="1" IsReadOnly="True" VerticalContentAlignment="Center" Padding="5, 0, 0, 0" BorderThickness="1" BorderBrush="#FF454545" Margin="0, 7, 0, 0" HorizontalAlignment="Stretch">
                    <ComboBox.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.WindowBrushKey}" Color="#FF303030" />
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                        <Style x:Key="FocusVisual">
                            <Setter Property="Control.Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Style TargetType="ComboBox">
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="True">
                                    <Setter Property="Foreground" Value="#FFEEEEEE"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="#FFBBBBBB"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                        <SolidColorBrush x:Key="ComboBox.Static.Background" Color="#FF303030" />
                        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FF656565"/>
                        <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FFFFFFFF"/>
                        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFABADB3"/>
                        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
                        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FFCCCCCC"/>
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="#FF404040" />
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF909090"/>
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FFFFFFFF"/>
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FF7EB4EA"/>
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="#FF303030" />
                        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FF7EB4EA"/>
                        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF909090"/>
                        <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="#FF303030" />
                        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF569DE5"/>
                        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FFFFFFFF"/>
                        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FF569DE5"/>
                        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="#FF303030" />
                        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FF569DE5"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FF454545"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#404040"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FF656565"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
                        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
                        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF909090"/>
                        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                            <Setter Property="OverridesDefaultStyle" Value="true"/>
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter Property="Focusable" Value="false"/>
                            <Setter Property="ClickMode" Value="Press"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Border x:Name="templateRoot" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" Background="{StaticResource ComboBox.Static.Background}" SnapsToDevicePixels="true">
                                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                            </Border>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsPressed" Value="true">
                                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                                            </MultiDataTrigger>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                                            </Trigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                                            </MultiDataTrigger>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                                            </MultiDataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
                    </ComboBox.Resources>
                    <ComboBox.Template>
                        <ControlTemplate TargetType="{x:Type ComboBox}" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" >
                            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                                </Grid.ColumnDefinitions>
                                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                                        <Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                            <ScrollViewer x:Name="DropDownScrollViewer">
                                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                                    </Canvas>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Themes:SystemDropShadowChrome>
                                </Popup>
                                <ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                                </Trigger>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="true"/>
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </MultiTrigger>
                                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ComboBox.Template>
                    <ComboBox.ItemContainerStyle>
                        <Style TargetType="ComboBoxItem">
                            <Setter Property="Background" Value="#FF303030"/>
                            <Setter Property="BorderBrush" Value="#FF303030"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Padding" Value="5, 0, 0, 0"/>
                            <Setter Property="Height" Value="25"/>
                        </Style>
                    </ComboBox.ItemContainerStyle>
                </ComboBox>
            </Grid>

            <Grid Grid.Column="1" Margin="10, 0, 0, 0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <RadioButton x:Name="SetYRadioButton" GroupName="YLevel" Content="Set Y" Foreground="#FFEEEEEE" Grid.Row="0" Checked="SetYRadioButton_Checked" />
                <TextBox x:Name="SetYTextBox" Height="25" Width="50" Text="319" Grid.Row="1" Padding="3, 3, 0, 0" Margin="0, 7, 0, 0"/>
            </Grid>
        </Grid>

        <Grid Grid.Row="4">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border Grid.Column="0" Width="90" Height="25" BorderThickness="1" BorderBrush="#FF528753" HorizontalAlignment="Left" VerticalAlignment="Bottom">
                <Button Width="90" Height="25" Foreground="White" Click="RenderButton_Click">

                    <StackPanel Orientation="Horizontal" Margin="0, 0, 12, 0" Width="Auto" Height="25">
                        <Image Source="/Resources/Image/Misc/Render_32px.png" Margin="0, 0, 0, 2" VerticalAlignment="Center" HorizontalAlignment="Left" Stretch="Fill" Width="15" Height="15" />
                        <TextBlock Margin="4, 0, 0, 3" HorizontalAlignment="Right" VerticalAlignment="Center" Text="Render" />
                    </StackPanel>

                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Background" Value="#FF303030"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border Background="{TemplateBinding Background}" >
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="#FF505050"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="#FF656565"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Border>

            <CheckBox x:Name="CloseWindowCheckBox" IsChecked="True" Grid.Column="1" Margin="10, 0, 0, 4" VerticalAlignment="Bottom" Foreground="#FFEEEEEE" Content="Close this window automatically"/>
        </Grid>
    </Grid>
</Window>
